import mongoose from "mongoose";
import { Schema } from "mongoose";

const employeeSchema = new Schema({
  userId: { type: Schema.Types.ObjectId, ref: "User", required: true },
  organization: { type: String, enum: ["SEVEN HILLS FACILITY SERVICES PRIVATE LIMITED", "LIV SIGNITY SERVICES (OPC) PRIVATE LIMITED"],},
  employeeID: { type: String, required: true, unique: true}, //auto load
  personalContact: { type: String, required: true,}, //countrycode
  dateOfBirth: { type: Date, required: true },
  preHNo: { type: String, },
  preStreet: { type: String, },
  preVillage: { type: String, },
  preMandal: { type: String, },
  preCity: { type: String, },
  preState: { type: String, },
  preCountry: { type: String, },
  prePincode: { type: String, },
  perHNo: { type: String, },
  perStreet: { type: String, },
  perVillage: { type: String, },
  perMandal: { type: String, },
  perCity: { type: String, },
  perState: { type: String, },
  perCountry: { type: String, },
  perPincode: { type: String, },
  height: { type: String,},
  weight: { type: String,},
  hairColour: { type: String,},
  eyeColour: { type: String,},
  chest: { type: String,},
  disease: { type: String,},
  IDMark1: { type: String,},
  IDMark2: { type: String,},
  fatherName: { type: String,},
  motherName: { type: String,},
  bloodGroup: { type: String, enum: ["A+", "AB+", "B+", "O+", "A-", "AB-", "B-", "O-"],},
  fatherOccupation: { type: String,},
  motherOccupation: { type: String,},
  motherTongue: { type: String,},
  languagesKnown: { type: String,},
  religion: { type: String, enum: ["Hinduism", "Islam", "Sikhism", "Christianity", "Buddhism", "Jainism", "Shinto", "Judaism", "Taoism", "Zoroastrianism"],},
  caste: { type: String, enum: ["OC", "BC", "SC", "ST"],},
  subCaste: { type: String,},
  PWDStatus: { type: String, enum: ["Yes", "No"],},
  disability: { type: String,},
  siblings: { type: String,},
  //state //country //pincode //city
  gender: { type: String, enum: ["Male", "Female", "Other"], required: true },
  empStatus: { type: String, enum: ["Active", "Resigned", "Terminated", "Quitted"], required: true },
  dateOfJoining: { type: Date, required: true },
  aadhaarNumber: { type: String, required: true },
  qualification: { type: String, },
  major: { type: String, },
  maritalStatus: { type: String, enum: ["Single", "Married", "Divorced", "Widowed"], required: true},
  emergencyContact: {type: String},
  spouseName: { type : String},
  childrenCount: {type: Number},
  permanentAddress: { type: String},
  officeContact: { type: String},
  officeEmail: { type: String },
  PANNumber: { type: String },
  department: { type: Schema.Types.ObjectId, ref: "Department", required: true },
  designation: { type: String, required: true },
  site: { type: Schema.Types.ObjectId, ref: "Site", required: true  },
  jobRole: { type: String},/*array enum*/
  // workSiteDetails: { type: String,},//*
  client: { type: Schema.Types.ObjectId, ref: "Client", required: true  },
  reportingInchargePerson: { type: String },
  repPersonDesignation: { type: String },
  repPersonEmployeeID: { type: String },
  currentSalary: { type: String },
  bankName: { type: String},
  bankAccountNumber: { type: String },
  IFSCCode: { type: String},
  bankBranch: { type: String},
  ESIDetails: { type: String,},
  insuranceDetails: { type: String,},
  PFDetails: { type: String,},
  UANNumber: { type: String,},
  //teamCount: { type: Number },
  //teamDetails: { type: Array },
  previousDesignation: { type: String },
  previousSalary: { type: String },
  dateOfPromotion: { type: Date },
  dateOfTermination: { type: Date },
  refPerson1: { type: String },
  isRefPerson1Employee: { type: String, enum: ["Yes", "No"]},
  refPerson1Contact: { type: String },
  refPerson1Email: { type: String },
  refPerson1Occupation: { type: String },
  refPerson1EmployeeID: { type: String },
  refPerson2: { type: String },
  isRefPerson2Employee: { type: String, enum: ["Yes", "No"]},
  refPerson2Contact: { type: String },
  refPerson2Email: { type: String },
  refPerson2Occupation: { type: String },
  refPerson2EmployeeID: { type: String },
  createdAt:  {type: Date, default: Date.now},
  updatedAt:  {type: Date, default: Date.now},
})

const Employee = mongoose.model("Employee", employeeSchema);
export default Employee;